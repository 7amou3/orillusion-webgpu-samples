import"./modulepreload-polyfill.b7f2da20.js";import{c as m,m as U}from"./mat4.f7fc816f.js";var G=`@group(0) @binding(0) var<storage, read> modelView: array<mat4x4<f32>>;
@group(0) @binding(1) var<storage, read> projection : mat4x4<f32>;
@group(0) @binding(2) var<storage, write> mvp : array<mat4x4<f32>>;
@group(0) @binding(3) var<uniform> count : u32;

@stage(compute) @workgroup_size(128)
fn main(@builtin(global_invocation_id) global_id : vec3<u32>) {
    // Guard against out-of-bounds work group sizes
    let index = global_id.x;
    if (index >= count) {
        return;
    }

    mvp[index] = projection * modelView[index];
}`;async function S(){if(!navigator.gpu)throw new Error("Not Support WebGPU");const e=await navigator.gpu.requestAdapter({powerPreference:"high-performance"});if(!e)throw new Error("No Adapter Found");return await e.requestDevice({requiredLimits:{maxStorageBufferBindingSize:e.limits.maxStorageBufferBindingSize}})}async function x(e,o,s){const c={layout:"auto",compute:{module:e.createShaderModule({code:G}),entryPoint:"main"}},n=await e.createComputePipelineAsync(c),p=e.createBuffer({size:o.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(p,0,o);const g=e.createBuffer({size:s.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(g,0,s);const l=e.createBuffer({size:o.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),i=e.createBuffer({size:4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});e.queue.writeBuffer(i,0,new Uint32Array([a]));const d=e.createBindGroup({layout:n.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:p}},{binding:1,resource:{buffer:g}},{binding:2,resource:{buffer:l}},{binding:3,resource:{buffer:i}}]});return{pipeline:n,bindGroup:d,mvpBuffer:l}}async function y(){b.innerHTML=B.innerHTML="-",f.innerHTML="Testing ...",f.disabled=!0,await new Promise(r=>setTimeout(r));const e=new Float32Array(a*4*4),o=[],s=m();for(let r=0;r<a;r++){const t=m();o.push(t),e.set(t,r*4*4)}console.time("cpu multiply x10");let c=performance.now();for(let r=0;r<10;r++)for(let t=0;t<a;t++){let u=o[t];U(u,s,u)}b.innerHTML=((performance.now()-c)/10).toFixed(2),console.timeEnd("cpu multiply x10");const n=await S(),{pipeline:p,bindGroup:g,mvpBuffer:l}=await x(n,e,s);for(let r=0;r<100;r++){const t=n.createCommandEncoder(),u=t.beginComputePass();u.setPipeline(p),u.setBindGroup(0,g),u.dispatchWorkgroups(Math.ceil(a/128)),u.end(),n.queue.submit([t.finish()])}const i=n.createBuffer({size:e.byteLength,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST});console.time("gpu multiply x100"),c=performance.now();const d=n.createCommandEncoder();d.copyBufferToBuffer(l,0,i,0,e.byteLength),n.queue.submit([d.finish()]),await i.mapAsync(GPUMapMode.READ),B.innerHTML=((performance.now()-c)/100).toFixed(2),console.timeEnd("gpu multiply x100");const w=i.getMappedRange(),P=new Float32Array(w);console.log(P),i.unmap(),f.disabled=!1,f.innerHTML="Run"}let a=1e6,T=document.querySelector("#select"),f=document.querySelector("button"),b=document.querySelector("#cpu"),B=document.querySelector("#gpu");T.addEventListener("change",e=>{console.log(e.target.value),a=+e.target.value,y()});f.addEventListener("click",y);
